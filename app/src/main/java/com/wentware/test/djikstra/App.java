/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.wentware.test.djikstra;

import java.util.Arrays;
import java.util.Scanner;

public class App {
    public static void main(String[] args) {
        App app = new App();
        int response = app.run(args);
        System.exit(response);
    }

    int run(String[] args)  {
        System.out.println("Starting dijkstra path finder");
        try {
            if (args.length < 3) {
                System.out.println("cmd ::= sourceNodeId destNodeId edgeTriplet...");
                System.out.println("edgeTriplet :: fromNodeId,toNodeId,weight");
                System.exit(1);
            }
            String sourceNodeId = args[0];
            String destNodeId = args[1];
            String[] remainingArgs = Arrays.copyOfRange(args, 2, args.length);
            Graph graph = parse(remainingArgs);
            DijkstraAlgo algo = new DijkstraAlgo(graph, sourceNodeId, destNodeId);
            DijkstraAlgo.Solution solution = algo.solve();
            System.out.println("Cost was " + solution.cost());
            System.out.println("Path was " + solution.path());
            return 0;
        } catch (Exception e) {
            System.err.println(e.getMessage());
            return -1;
        }
    }

    public Graph parse(String[] args) throws Exception {
        try (Scanner scanner = new Scanner(String.join("\n", args))) {
            Graph graph = new Graph();

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(",");


                if (parts.length == 3) {

                    Graph.Node from = graph.addNode(parts[0]);
                    Graph.Node to = graph.addNode(parts[1]);
                    int weight = Integer.parseInt(parts[2]);
                    from.addEdgeTo(to, weight);
                    //assume edge, add any new nodes
                } else {
                    String message = String.format("could not parse line %s", line);
                    throw new Exception(message);
                }
            }
            return graph;
        }
    }
}
