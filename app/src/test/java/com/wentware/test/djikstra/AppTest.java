/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.wentware.test.djikstra;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static java.lang.System.out;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

class AppTest {

    private App classUnderTest;

    @BeforeEach
    void setUp() {
        classUnderTest = new App();
    }

    @Test
    void parse_withGoodData() throws Exception {
        String[] args = Fixture.GRAPH_DEF;

        Graph g = classUnderTest.parse(args);
        assertNotNull(g);
        assertEquals(4, g.getNodes().size());
        Graph.Node n1 = g.findNodeById("N1").orElseThrow();
        assertEquals(2, n1.getEdges().size());
        Graph.Node n2 = g.findNodeById("N2").orElseThrow();
        assertEquals(2, n2.getEdges().size());
        Graph.Node n3 = g.findNodeById("N3").orElseThrow();
        assertEquals(1, n3.getEdges().size());
        assertNotNull(n3.getEdges().stream().filter(e -> "N4".equals(e.getToNode().getId())).findFirst());
    }

    @Test
    void run_withGoodGraph() throws Exception {

        DijkstraAlgo algo = createAlgo();
        DijkstraAlgo.Solution solution = algo.traverse();
        out.println("Cost was "+solution.cost());
        out.println("Path was "+solution.path());

        assertNotNull(solution);
        assertEquals(4,solution.cost());
        assertEquals(2, solution.path().size());
        Graph graph = algo.getGraph();
        Graph.Node n1 = graph.findNodeById("N1").orElseThrow();
        Graph.Node n2 = graph.findNodeById("N2").orElseThrow();
        assertTrue(solution.path().contains(n1));
        assertTrue(solution.path().contains(n2));
    }

    private DijkstraAlgo createAlgo() throws Exception {
        Graph graph = Fixture.createTestGraph();
        return new DijkstraAlgo(graph,"N1", "N4");
    }
}
